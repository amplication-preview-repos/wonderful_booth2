/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AgentService } from "../agent.service";
import { AgentCreateInput } from "./AgentCreateInput";
import { Agent } from "./Agent";
import { AgentFindManyArgs } from "./AgentFindManyArgs";
import { AgentWhereUniqueInput } from "./AgentWhereUniqueInput";
import { AgentUpdateInput } from "./AgentUpdateInput";
import { AgentAssignmentFindManyArgs } from "../../agentAssignment/base/AgentAssignmentFindManyArgs";
import { AgentAssignment } from "../../agentAssignment/base/AgentAssignment";
import { AgentAssignmentWhereUniqueInput } from "../../agentAssignment/base/AgentAssignmentWhereUniqueInput";

export class AgentControllerBase {
  constructor(protected readonly service: AgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Agent })
  async createAgent(@common.Body() data: AgentCreateInput): Promise<Agent> {
    return await this.service.createAgent({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Agent] })
  @ApiNestedQuery(AgentFindManyArgs)
  async agents(@common.Req() request: Request): Promise<Agent[]> {
    const args = plainToClass(AgentFindManyArgs, request.query);
    return this.service.agents({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Agent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async agent(
    @common.Param() params: AgentWhereUniqueInput
  ): Promise<Agent | null> {
    const result = await this.service.agent({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Agent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAgent(
    @common.Param() params: AgentWhereUniqueInput,
    @common.Body() data: AgentUpdateInput
  ): Promise<Agent | null> {
    try {
      return await this.service.updateAgent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Agent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAgent(
    @common.Param() params: AgentWhereUniqueInput
  ): Promise<Agent | null> {
    try {
      return await this.service.deleteAgent({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/agentAssignments")
  @ApiNestedQuery(AgentAssignmentFindManyArgs)
  async findAgentAssignments(
    @common.Req() request: Request,
    @common.Param() params: AgentWhereUniqueInput
  ): Promise<AgentAssignment[]> {
    const query = plainToClass(AgentAssignmentFindManyArgs, request.query);
    const results = await this.service.findAgentAssignments(params.id, {
      ...query,
      select: {
        agent: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/agentAssignments")
  async connectAgentAssignments(
    @common.Param() params: AgentWhereUniqueInput,
    @common.Body() body: AgentAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agentAssignments: {
        connect: body,
      },
    };
    await this.service.updateAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/agentAssignments")
  async updateAgentAssignments(
    @common.Param() params: AgentWhereUniqueInput,
    @common.Body() body: AgentAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agentAssignments: {
        set: body,
      },
    };
    await this.service.updateAgent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/agentAssignments")
  async disconnectAgentAssignments(
    @common.Param() params: AgentWhereUniqueInput,
    @common.Body() body: AgentAssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agentAssignments: {
        disconnect: body,
      },
    };
    await this.service.updateAgent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
